// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ lmdb-js
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const { open } = require('lmdb');

// –û—Ç–∫—Ä—ã–≤–∞–µ–º –±–¥ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π
let levelsDB = open({
    path: 'levels-db',
    compression: true,
});

function MathNextLevel(current, koeff) {
    return (100 * (current * 1.7 + 1) * koeff).toFixed(0);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * @param {string} guildID 
 */
async function createLevelGuild(guildID) {
    await levelsDB.put(guildID, {
        enabled: false,
        interval: 60,
        xp: {
            min: 1,
            max: 5,
            koeff: 0.7
        },
        channelID: "-1",
        messageEnabled: true,
        message: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {user.mention}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ **{level}** —É—Ä–æ–≤–Ω—è!",
        roles: [],
        data: [] // {user, xp, level, lastMessage}, {}
    })

    return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * @param {string} guildID 
 */
async function getLevelGuild(guildID) {
    let guild = levelsDB.get(guildID);
    if (guild == undefined) {
        await createLevelGuild(guildID);
        guild = levelsDB.get(guildID);
    }

    return guild;
}

/**
 * –í–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ª–≤–ª-—Å–∏—Å—Ç–µ–º—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * 
 * @param {string} guildID 
 * @param {boolean} status 
 */
async function setLevelGuildEnabled(guildID, status) {
    const guild = await getLevelGuild(guildID);
    guild.enabled = status;
    levelsDB.put(guildID, guild);

    return true;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
 * 
 * @param {string} guildID 
 * @param {string} channelID
 */
async function setLevelGuildChannel(guildID, channelID) {
    const guild = await getLevelGuild(guildID);
    guild.channelID = channelID;
    levelsDB.put(guildID, guild);

    return true;
}

/**
 * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ
 * 
 * @param {string} guildID 
 * @param {string} message
 */
async function setLevelGuildMessage(guildID, message) {
    const guild = await getLevelGuild(guildID);
    guild.message = message;
    levelsDB.put(guildID, guild);

    return true;
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —é–∑–µ—Ä–µ
 * 
 * @param {string} guildID 
 * @param {*} user
 */
async function putLevelUser(guildID, user) {
    const guild = await getLevelGuild(guildID);
    const { data } = guild;
    let u = data.find(us => us.user === user.user);
    data[data.indexOf(u)] = user;
    if (!u) data.push(user)
    guild.data = data;
    levelsDB.put(guildID, guild);

    return true;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–∞–º—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * 
 * @param {string} guildID 
 * @param {string} userID 
 */
async function getLevelUserByGuild(guildID, userID) {
    const guild = await getLevelGuild(guildID);
    const { data } = guild;
    let user = data.find(user => user.user === userID);
    if (!user) return user = await setLevelUserByGuild(guildID, userID);

    return user;
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–∞–º—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 * 
 * @param {string} guildID 
 * @param {string} userID 
 */
async function setLevelUserByGuild(guildID, userID) {
    let guild = await getLevelGuild(guildID);
    const data = { user: userID, xp: 0, level: 0, lastMessage: 1 };
    guild.data.push(data);
    levelsDB.put(guildID, guild);

    return data;
}

module.exports = {
    MathNextLevel,
    createLevelGuild,
    getLevelGuild,
    setLevelGuildEnabled,
    setLevelGuildChannel,
    setLevelGuildMessage,
    putLevelUser,
    getLevelUserByGuild,
    setLevelUserByGuild
}
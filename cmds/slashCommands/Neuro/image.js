const { SlashCommandBuilder } = require("discord.js");
const { CheckAch } = require('../../../func/games/giveAch.js');
const { emojis } = require('../../../config.js');

const { RsnChat } = require('rsnchat');
const rsnchat = new RsnChat(process.env.RSN);

module.exports = {
    category: 'neuro',
    cooldown: 60,
    data: new SlashCommandBuilder()
        .setName('image')
        .setDescription('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
        .addStringOption((option) =>
            option.setName('–∑–∞–ø—Ä–æ—Å')
                .setDescription('–û–ø–∏—à–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å')
                .setMaxLength(256)
                .setRequired(true)
        )
        .addStringOption((option) =>
            option.setName('–º–æ–¥–µ–ª—å')
                .setDescription('–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏')
                .setRequired(true)
                .addChoices(
                    { name: 'Sdxl', value: 'sdxl' },
                    { name: 'Kandinsky', value: 'kandinsky' },
                    { name: 'Absolutebeauty', value: 'absolutebeauty' }
                )
        ),
    async execute(interaction, guild, user) {
        await interaction.deferReply();
        if (user.imageGens < 1) return interaction.editReply(`${emojis.error} | –í–∞—à–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–¥–Ω–∏–º–∏—Ç–µ –±–æ—Ç–∞ –Ω–∞ [BotiCord](https://boticord.top/bot/payzibot) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 15-—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π!\n\n–ö—Å—Ç–∞—Ç–∏ –ø–æ–¥–Ω–∏–º–∞—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤, –∞ —ç—Ç–æ 60 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –≤ —Å—É—Ç–∫–∏ :)`)

        const negative = "blury, bad quality, nsfw";
        const model = interaction.options.getString('–º–æ–¥–µ–ª—å');
        const text = interaction.options.getString('–∑–∞–ø—Ä–æ—Å');

        interaction.editReply(`${emojis.loading} | –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É...`)

        async function AfterGen(image) {
            user.imageGens--;
            await user.save();
            interaction.editReply({
                content: `üñºÔ∏è –í–æ—Ç –≤–∞—à–∞ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞!\n-# –ó–∞–ø—Ä–æ—Å: ${text.replace('`', '\`')}`,
                files: [{ attachment: Buffer.from(image, 'base64'), name: 'image.png' }]
            })
            CheckAch(9, interaction.user.id, interaction.channel, user)
        }

        if (model === 'sdxl') {
            await rsnchat.sdxl(text, negative)
                .then(response => {
                    AfterGen(response.image)
                }).catch(() => {
                    interaction.editReply(`${emojis.error} | –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ, –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ!`)
                    return
                });
        } else if (model === 'kandinsky') {
            await rsnchat.kandinsky(text, negative)
                .then(response => {
                    AfterGen(response.image)
                }).catch(() => {
                    interaction.editReply(`${emojis.error} | –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ, –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ!`)
                    return
                });
        } else {
            await rsnchat.absolutebeauty(text, negative)
                .then(response => {
                    AfterGen(response.image)
                }).catch(() => {
                    interaction.editReply(`${emojis.error} | –û—à–∏–±–∫–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —á—É—Ç—å –ø–æ–∑–∂–µ, –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ!`)
                    return
                });
        }
    },
};

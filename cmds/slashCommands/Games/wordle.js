const { SlashCommandBuilder, EmbedBuilder, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { emojis } = require('../../../config.js');

const words = require('../../../games_src/wordle.json');

const games = new Map();

module.exports = {
	category: 'games',
	cooldown: 60,
	data: new SlashCommandBuilder()
		.setName('wordle')
		.setDescription('–ò–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–≥–∞–¥–∞—Ç—å 5-—Ç–∏ –±—É–∫–≤–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ'),
	async execute(interaction, guild) {
		await interaction.deferReply();

		const gameState = {
			word: words[Math.floor(Math.random() * words.length)].toLowerCase(),
			attempts: 0,
			maxAttempts: 6,
			guesses: [],
			isActive: true
		};

		games.set(interaction.channelId, gameState);

		const gameEmbed = new EmbedBuilder()
			.setColor(guild.colors.basic)
			.setTitle('Wordle')
			.setDescription('–£–≥–∞–¥–∞–π—Ç–µ —Å–ª–æ–≤–æ –∏–∑ 5 –±—É–∫–≤!\n–£ –≤–∞—Å –µ—Å—Ç—å 6 –ø–æ–ø—ã—Ç–æ–∫.')
			.addFields(
				{ name: '–ü–æ–ø—ã—Ç–∫–∏', value: '0/6', inline: true },
				{ name: '–°—Ç–∞—Ç—É—Å', value: '–ò–¥—ë—Ç –∏–≥—Ä–∞', inline: true }
			);

		const row = new ActionRowBuilder()
			.addComponents(
				new ButtonBuilder()
					.setCustomId('surrender')
					.setLabel('–°–¥–∞—Ç—å—Å—è')
					.setStyle(ButtonStyle.Danger)
			);

		const response = await interaction.editReply({
			embeds: [gameEmbed],
			components: [row]
		});

		const filter = i => i.user.id === interaction.user.id;
		const collector = response.createMessageComponentCollector({ filter, time: 300000 });
		const messageCollector = interaction.channel.createMessageCollector({ filter: m => m.author.id === interaction.user.id, time: 300000 });

		messageCollector.on('collect', async (message) => {
			if (!games.has(interaction.channelId)) return;

			const game = games.get(interaction.channelId);
			const guess = message.content.toLowerCase();

			if (guess.length !== 5) {
				message.reply('–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 5 –±—É–∫–≤!').then(msg => {
					setTimeout(() => msg.delete(), 3000);
				});
				return;
			}

			game.attempts++;
			let feedback = '';
			for (let i = 0; i < guess.length; i++) {
				if (guess[i] === game.word[i]) {
					feedback += 'üü©';
				} else if (game.word.includes(guess[i])) {
					feedback += 'üü®';
				} else {
					feedback += '‚¨õ';
				}
			}
			game.guesses.push({ guess, feedback });

			const newEmbed = EmbedBuilder.from(response.embeds[0])
				.setFields(
					{ name: '–ü–æ–ø—ã—Ç–∫–∏', value: `${game.attempts}/6`, inline: true },
					{ name: '–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏', value: game.guesses.map(g => `${g.guess} ${g.feedback}`).join('\n') })

			await response.edit({ embeds: [newEmbed] });

			if (guess === game.word) {
				gameWon(interaction, game, response, guild);
				games.delete(interaction.channelId);
				messageCollector.stop();
				collector.stop();
			} else if (game.attempts >= game.maxAttempts) {
				gameLost(interaction, game, response, guild);
				games.delete(interaction.channelId);
				messageCollector.stop();
				collector.stop();
			}

			message.delete().catch(() => { });
		});

		collector.on('collect', async (i) => {
			if (i.customId === 'surrender') {
				const game = games.get(interaction.channelId);
				gameLost(interaction, game, response, guild);
				games.delete(interaction.channelId);
				messageCollector.stop();
				collector.stop();
			}
		});
	},
};

async function gameWon(interaction, game, response, guild) {
	const winEmbed = new EmbedBuilder()
		.setColor(guild.colors.correct)
		.setTitle('–ü–æ–±–µ–¥–∞!')
		.setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ "${game.word}" –∑–∞ ${game.attempts} –ø–æ–ø—ã—Ç–æ–∫!`)
		.setFields(
			{ name: '–ü–æ–ø—ã—Ç–∫–∏', value: `${game.attempts}/6`, inline: true },
			{ name: '–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏', value: game.guesses.map(g => `${g.guess} ${g.feedback}`).join('\n') })

	await response.edit({ embeds: [winEmbed], components: [] });
}

async function gameLost(interaction, game, response, guild) {
	const loseEmbed = new EmbedBuilder()
		.setColor(guild.colors.error)
		.setTitle('–ü–æ—Ä–∞–∂–µ–Ω–∏–µ!')
		.setDescription(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ. –≠—Ç–æ –±—ã–ª–æ "${game.word}"`)
		.setFields(
			{ name: '–ü–æ–ø—ã—Ç–∫–∏', value: `${game.attempts}/6`, inline: true },
			{ name: '–í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏', value: game?.guesses?.map(g => `${g.guess} ${g.feedback}`).join('\n') || "–ù–µ—Ç" }
		);

	await response.edit({ embeds: [loseEmbed], components: [] });
}